Now that you have declared all the parameters of your CNN, all you need to do is to implement the net's forward() method, 
and voila, you have your very first PyTorch CNN.

Note: for evaluation purposes, the entire code of the class needs to be in the script. We are using the __init__ method as you have coded it on the previous exercise,
while you are going to code the .forward() method here.

Instructions
Apply the first convolutional layer, followed by the relu nonlinearity, then in the next line apply max-pooling layer.
Apply the second convolutional layer, followed by the relu nonlinearity, then in the next line apply max-pooling layer.
Transform the feature map from 4 dimensional to 2 dimensional space. The first dimension contains the batch size (-1),
deduct the second dimension, by multiplying the values for height, width and depth.
Apply the fully-connected layer and return the result.



class Net(nn.Module):
    def __init__(self, num_classes):
        super(Net, self).__init__()
		
        # Instantiate the ReLU nonlinearity
        self.relu = nn.ReLU()
        
        # Instantiate two convolutional layers
        self.conv1 = nn.Conv2d(in_channels=1, out_channels=5, kernel_size=3, padding=1)
        self.conv2 = nn.Conv2d(in_channels=5, out_channels=10, kernel_size=3, padding=1)
        
        # Instantiate a max pooling layer
        self.pool = nn.MaxPool2d(2, 2)
        
        # Instantiate a fully connected layer
        self.fc = nn.Linear(7 * 7 * 10, 10)

    def forward(self, x):

        # Apply conv followd by relu, then in next line pool
        x = self.relu(self.conv1(x))
        x = self.pool(x)

        # Apply conv followd by relu, then in next line pool
        x = self.relu(self.conv2(x))
        x = self.pool(x)

        # Prepare the image for the fully connected layer
        x = x.view(-1,7*7*10 )

        # Apply the fully connected layer and return the result
        return self.fc(x)
