While I and most of PyTorch practitioners love the torch.nn package (OOP way), other practitioners prefer building neural network models in a more functional way,
using torch.nn.functional. More importantly, it is possible to mix the concepts and use both libraries at the same time (we have already done it in the previous chapter).
You are going to build the same neural network you built in the previous exercise, but this time using the functional way.

As before, we have already imported the torch library and torch.nn.functional as F.

Instructions
Create 10 random images with shape (1, 28, 28).
Create 6 random filters with shape (1, 3, 3).
Convolve the images with the filters.

# Create 10 random images
image = torch.rand(10, 1, 28, 28)

# Create 6 filters
filters = torch.rand(6, 1, 3, 3)

# Convolve the image with the filters
output_feature = F.conv2d(image, filters, stride=1, padding=1)
print(output_feature.shape)

output:

torch.Size([10, 6, 28, 28])
