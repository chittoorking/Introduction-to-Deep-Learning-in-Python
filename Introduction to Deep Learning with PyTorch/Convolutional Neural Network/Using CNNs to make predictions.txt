Building and training neural networks is a very exciting job (trust me, I do it every day)!
However, the main utility of neural networks is to make predictions. 
This is the entire reason why the field of deep learning has bloomed in the last few years, as neural networks predictions are extremely accurate.
On this exercise, we are going to use the convolutional neural network you already trained in order to make predictions on the MNIST dataset.

Remember that torch.max() takes two arguments: -output.data - the tensor which contains the data.

Either 1 to do argmax or 0 to do max.
Instructions
Iterate over the given test_loader, saving the results of each iteration in data.
Get the image and label from the data tuple, storing the results in image and label.
Make a forward pass in the net using your image.
Get the net prediction using torch.max() function.

# Iterate over the data in the test_loader
for i, data in enumerate(test_loader):
  
    # Get the image and label from data
    image, label = data
    
    # Make a forward pass in the net with your image
    output = net(image)
    
    # Argmax the results of the net
    _, predicted = torch.max(output.data, 1)
    if predicted == label:
        print("Yipes, your net made the right prediction " + str(predicted))
    else:
        print("Your net prediction was " + str(predicted) + ", but the correct label is: " + str(label))
        
  
  output:
  
  Yipes, your net made the right prediction tensor([7])
Yipes, your net made the right prediction tensor([1])
Yipes, your net made the right prediction tensor([1])
Yipes, your net made the right prediction tensor([7])
Yipes, your net made the right prediction tensor([5])
Yipes, your net made the right prediction tensor([9])
Yipes, your net made the right prediction tensor([6])
Yipes, your net made the right prediction tensor([0])
Yipes, your net made the right prediction tensor([0])
Yipes, your net made the right prediction tensor([3])
